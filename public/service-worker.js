
// Set this to true for production
var doCache = true;

// Name our cache
var CACHE_NAME = 'pwa-cache-v1';

// Delete old caches that are not our current one!
self.addEventListener('activate',function(event){
  const cacheWhitelist = CACHE_NAME;
  event.waitUntil(
    caches.keys()
      .then(function(keyList){
        Promise.all(keyList.map(function(key) {
          if (!cacheWhitelist.includes(key)) {
            console.log('Deleting cache: ' + key)
            return caches.delete(key);
          }
        }))
      })
  );
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install',function(event){
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME)
        .then(function(cache) {
          const urlsToCache = [
            '/',
            'static/css/*.css',
            'static/js/*.js',
            'static/media/*.*'
          ]
          cache.addAll(urlsToCache)
          console.log('cached');
        })
      )
    }
  });
//           Get the assets manifest so we can see what our js file is named
//           This is because webpack hashes it
//           fetch("asset-manifest.json")
//             .then(function(response){
//               response.json()
//            })
//             .then(function(assets){
//               // Open a cache and cache our files
//               // We want to cache the page and the main.js generated by webpack
//               // We could also cache any static assets like CSS or images
//               const urlsToCache = [
//                 '/',
//                 'static/css/*.css',
//                 'static/js/*.js',
//                 assets['main.js'],
//                 assets['main.css']
//                 // "static/css/main.9a0fe4f1.css",
//                 // "static/js/main.b571926f.js",
//                 // "static/media/logo.5d5d9eef.svg"
//               ]
//               cache.addAll(urlsToCache)
//               console.log('cached');
//             })
//          })
//     );
//   }
// });

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', function(event){
    if (doCache) {
      event.respondWith(
          caches.match(event.request).then(function(response) {
              return response || fetch(event.request);
          })
      );
    }
});

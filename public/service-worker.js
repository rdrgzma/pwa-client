// var CACHE_NAME = 'pwa-v2';
// var urlsToCache = [
//   "/",
//   'build/*.html',
//   'build/manifest.json',
//   'build/static/css/*.css',
//   'build/static/js/*.js',
//   'build/static/media/*.svg'
// ];
//
// // Install
// self.addEventListener('install', function(event) {
//   event.waitUntil(
//     caches.open(CACHE_NAME).then(function(cache) {
//       return cache.addAll(urlsToCache);
//     })
//   );
// });
//
// self.addEventListener('activate', function(event) {
//   event.waitUntil(
//     caches.keys().then(function(cacheNames) {
//       return Promise.all(
//         cacheNames.filter(function(cacheName) {
//           return cacheName !== CACHE_NAME;
//         }).map(function(cacheName) {
//           console.log('Deleting '+ cacheName);
//           return caches.delete(cacheName);
//         })
//       );
//     })
//   );
// });
//
// self.addEventListener('fetch', function(event) {
//   event.respondWith(
//        caches.match(event.request).then(function(response) {
//            if (response) {
//                // retrieve from cache
//                return response;
//            }
//            // fetch as normal
//            return fetch(event.request);
//        })
//    );
//   // event.respondWith(
//   //   fetch(event.request).catch(function() {
//   //     return caches.match(event.request);
//   //   })
//   // );
// });





// Set this to true for production
var doCache = true;

// Name our cache
var CACHE_NAME = 'pwa-cache-v1';

// Delete old caches that are not our current one!
self.addEventListener('activate',function(event){
  const cacheWhitelist = CACHE_NAME;
  event.waitUntil(
    caches.keys()
      .then(function(keyList){
        Promise.all(keyList.map(function(key) {
          if (!cacheWhitelist.includes(key)) {
            console.log('Deleting cache: ' + key)
            return caches.delete(key);
          }
        }))
      })
  );
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install',function(event){
  // event.waitUntil(
  //   caches.open(CACHE_NAME)
  //     .then(function(cache) {
  //       // Open a cache and cache our files
  //       const urlsToCache = [
  //                     "/",
  //                     assetes
  //                   ]
  //       return cache.addAll(urlsToCache);
  //     })
  // );
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME)
        .then(function(cache) {
          // Get the assets manifest so we can see what our js file is named
          // This is because webpack hashes it
          fetch("asset-manifest.json")
            .then(function(response){
              response.json()
           })
            .then(function(assets){
              // Open a cache and cache our files
              // We want to cache the page and the main.js generated by webpack
              // We could also cache any static assets like CSS or images
              const urlsToCache = [
                '/',
                "static/css/main.9a0fe4f1.css",
                "static/js/main.b571926f.js",
                "static/media/logo.5d5d9eef.svg"
              ]
              cache.addAll(urlsToCache)
              console.log('cached');
            })
         })
    );
  }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', function(event){
    if (doCache) {
      event.respondWith(
          caches.match(event.request).then(function(response) {
              return response || fetch(event.request);
          })
      );
    }
});
